AC_INIT(src/musixbox/main.cc)

AM_CONFIG_HEADER(include/config.h)
AM_INIT_AUTOMAKE(musixbox,0.1)
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB

# this is a C++ project
AC_LANG([C++])
AC_REQUIRE_CPP

AC_ARG_WITH(mad,
[  --with-mad=dir              MP3 decoding using libmad],
[
	LDFLAGS="$LDFLAGS -L$with_mad/lib"
	CPPFLAGS="$CPPFLAGS -I$with_mad/include"
])
AC_ARG_WITH(id3tag,
[  --with-id3tag=dir           Decode MP3 ID3 tags using libid3tag],
[
	LDFLAGS="$LDFLAGS -L$with_id3tag/lib"
	CPPFLAGS="$CPPFLAGS -I$with_id3tag/include"
])
AC_ARG_WITH(vorbis,
[  --with-vorbis=dir           Ogg Vorbis decoding using libogg/libvorbis],
[
	LDFLAGS="$LDFLAGS -L$with_vorbis/lib"
	CPPFLAGS="$CPPFLAGS -I$with_vorbis/include"
])
AC_ARG_WITH(flac,
[  --with-flac=dir             FLAC decoding using libFLAC++],
[
	LDFLAGS="$LDFLAGS -L$with_flac/lib"
	CPPFLAGS="$CPPFLAGS -I$with_flac/include"
])
AC_ARG_WITH(sdl,
[  --with-sdl=dir              Interaction using SDL], 
[
	LDFLAGS="$LDFLAGS -L$with_sdl/lib"
	CPPFLAGS="$CPPFLAGS -I$with_sdl/include"
])
AC_ARG_WITH(ao,
[  --with-ao=dir               Interaction using libao], 
[
	LDFLAGS="$LDFLAGS -L$with_ao/lib"
	CPPFLAGS="$CPPFLAGS -I$with_ao/include"
])
AC_ARG_WITH(fftw,
[  --with-fftw=dir             Use fftw3 library for spectrum analyzer],
[
	LDFLAGS="$LDFLAGS -L$with_fftw/lib"
	CPPFLAGS="$CPPFLAGS -I$with_fftw/include"
])
AC_ARG_WITH(mikmod,
[  --with-mikmod=dir           Amiga module decoding using libmikmod],
[
	LDFLAGS="$LDFLAGS -L$with_mikmod/lib"
	CPPFLAGS="$CPPFLAGS -I$with_mikmod/include"
])
AC_ARG_WITH(sidplay2,
[  --with-sidplay2=dir         SID decoding using libsidplay2],
[
	LDFLAGS="$LDFLAGS -L$with_sidplay2/lib -L$with_sidplay2/lib/sidplay/builders -rpath $with_sidplay2/lib/sidplay/builders"
	CPPFLAGS="$CPPFLAGS -I$with_sidplay2/include"
])
AC_ARG_WITH(curl,
[  --with-curl=dir             Remote fetching using libcurl],
[
	LDFLAGS="$LDFLAGS -L$with_curl/lib"
	CPPFLAGS="$CPPFLAGS -I$with_curl/include"
])
AC_ARG_WITH(alsa,
[  --with-alsa=dir             Output using ALSA], 
[
	LDFLAGS="$LDFLAGS -L$with_alsa/lib"
	CPPFLAGS="$CPPFLAGS -I$with_alsa/include"
])
AC_PATH_PROG(XML_CONFIG, xml2-config, no)
if test "$XML_CONFIG" != "no"; then
	LDFLAGS="$LDFLAGS `$XML_CONFIG --libs`"
	CPPFLAGS="$CPPFLAGS `$XML_CONFIG --cflags`"
fi
AC_ARG_WITH(mpg123,
[  --with-mpg123=dir           MP3 decoding using libmpg123], 
[
	LDFLAGS="$LDFLAGS -L$with_mpg123/lib"
	CPPFLAGS="$CPPFLAGS -I$with_mpg123/include"
])
AC_ARG_WITH(id3lib,
[  --with-id3lib=dir           Decode MP3 ID3 tags using id3lib],
[
	LDFLAGS="$LDFLAGS -L$with_id3lib/lib"
	CPPFLAGS="$CPPFLAGS -I$with_id3lib/include"
])

# we need pthreads
AC_SEARCH_LIBS([pthread_create], [pthread], [],
	AC_MSG_ERROR([POSIX threads are required])
)

# check for all libraries
AC_CHECK_LIB([mad], [mad_stream_init], [
	AC_DEFINE(WITH_MAD, [], [Decode using libmad])
	LDFLAGS="$LDFLAGS -lmad"
	AM_CONDITIONAL([MAD], [true])
], [
	AM_CONDITIONAL([MAD], [false])
])
AC_CHECK_LIB([id3tag], [id3_file_tag], [
	AC_DEFINE(WITH_ID3TAG, [], [Decode ID3 tags using libid3tag])
	LDFLAGS="$LDFLAGS -lid3tag"
	AM_CONDITIONAL([ID3TAG], [true])
], [
	AM_CONDITIONAL([ID3TAG], [false])
])
AC_CHECK_LIB([vorbisfile], [ov_open_callbacks], [
	AC_DEFINE(WITH_VORBIS, [], [Decode using libvorbis])
	LDFLAGS="$LDFLAGS -lvorbisfile"
	AM_CONDITIONAL([VORBIS], [true])
], [
	AM_CONDITIONAL([VORBIS], [false])
])
AC_CHECK_LIB([SDL], [SDL_Init], [
	AC_DEFINE(WITH_SDL, [], [Interaction using SDL])
	LDFLAGS="$LDFLAGS -lSDL"
	AM_CONDITIONAL([SDL], [true])
], [
	AM_CONDITIONAL([SDL], [false])
])
AC_CHECK_LIB([ao], [ao_initialize], [
	AC_DEFINE(WITH_AO, [], [Output using libao])
	LDFLAGS="$LDFLAGS -lao"
	AM_CONDITIONAL([AO], [true])
], [
	AM_CONDITIONAL([AO], [false])
])
AC_CHECK_LIB([fftw3], [fftw_plan_dft_r2c_1d], [
	AC_DEFINE(WITH_FFTW, [], [Use FFT library])
	LDFLAGS="$LDFLAGS -lfftw3"
	AM_CONDITIONAL([FFTW], [true])
], [
	AM_CONDITIONAL([FFTW], [false])
])
AC_CHECK_LIB([mikmod], [MikMod_Init], [
	AC_DEFINE(WITH_MIKMOD, [], [Decode using libmikmod])
	LDFLAGS="$LDFLAGS -lmikmod"
	AM_CONDITIONAL([MIKMOD], [true])
], [
	AM_CONDITIONAL([MIKMOD], [false])
])
AC_CHECK_LIB([curl], [curl_global_init], [
	AC_DEFINE(WITH_CURL, [], [Remote fetching using libcurl])
	LDFLAGS="$LDFLAGS -lcurl"
	AM_CONDITIONAL([CURL], [true])
], [
	AM_CONDITIONAL([CURL], [false])
])
AC_CHECK_LIB([asound], [snd_pcm_open], [
	AC_DEFINE(WITH_ALSA, [], [Output using ALSA])
	LDFLAGS="$LDFLAGS -lasound"
	AM_CONDITIONAL([ALSA], [true])
], [
	AM_CONDITIONAL([ALSA], [false])
])
if test "x${SDL_FALSE}" != "x"; then
	AC_CHECK_LIB([SDL_gfx], [pixelColor], [
		AC_DEFINE(WITH_SDLGFX, [], [Support functions from SDL_gfx])
		LDFLAGS="$LDFLAGS -lSDL_gfx"
		AM_CONDITIONAL([SDLGFX], [true])
	], [
		AM_CONDITIONAL([SDLGFX], [false])
	])
else
	AM_CONDITIONAL([SDLGFX], [false])
fi
AC_CHECK_LIB([mpg123], [mpg123_init], [
	AC_DEFINE(WITH_MPG123, [], [Decode using libmpg123])
	LDFLAGS="$LDFLAGS -lmpg123"
	AM_CONDITIONAL([MPG123], [true])
], [
	AM_CONDITIONAL([MPG123], [false])
])

AC_MSG_CHECKING(for whether FLAC++ is usuable)
AC_LANG_PUSH(C++)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <FLAC++/decoder.h>

class Test : public FLAC::Decoder::Stream
{
protected:
	FLAC__StreamDecoderReadStatus read_callback(FLAC__byte buffer[], size_t* bytes) { }
	FLAC__StreamDecoderWriteStatus write_callback(const FLAC__Frame* frame, const FLAC__int32 *const buffer[]) { }
	void error_callback(FLAC__StreamDecoderErrorStatus status) { }
};]],
 [[Test test;]])], [
 AC_MSG_RESULT(yes)
 AC_DEFINE(WITH_FLAC, [], [Decode using libFLAC++])
 LDFLAGS="$LDFLAGS -lFLAC++"
 AM_CONDITIONAL([FLAC], [true])
], [
 AC_MSG_RESULT(no)
 AM_CONDITIONAL([FLAC], [false])
])
AC_LANG_POP(C++)

AC_MSG_CHECKING(for whether libsidplay2 is usuable)
AC_LANG_PUSH(C++)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sidplay/sidplay2.h>
#include <sidplay/builders/resid.h>

class Test : public sidplay2
{
public:
	Test() {
		ReSIDBuilder* rs = new ReSIDBuilder("ReSID");
	}
};]],
 [[Test test;]])], [
 AC_MSG_RESULT(yes)
 AC_DEFINE(WITH_SIDPLAY2, [], [Decode using libsidplay2])
 LDFLAGS="$LDFLAGS -lsidplay2 -lresid-builder"
 AM_CONDITIONAL([SIDPLAY2], [true])
], [
 AC_MSG_RESULT(no)
 AM_CONDITIONAL([SIDPLAY2], [false])
])
AC_LANG_POP(C++)

AC_CHECK_LIB([xml2], [xmlReadMemory], [
	AC_DEFINE(WITH_XML, [], [Parsing using libxml2])
	AM_CONDITIONAL([XML], [true])
], [
	AM_CONDITIONAL([XML], [false])
])

AC_MSG_CHECKING(for whether id3lib is usuable)
AC_LANG_PUSH(C++)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <id3/tag.h>

class Test : public ID3_Tag
{
};]],
 [[Test test;]])], [
 AC_MSG_RESULT(yes)
 AC_DEFINE(WITH_ID3LIB, [], [Parse ID3 tags using id3lib++])
 LDFLAGS="$LDFLAGS -lid3"
 AM_CONDITIONAL([ID3LIB], [true])
], [
 AC_MSG_RESULT(no)
 AM_CONDITIONAL([ID3LIB], [false])
])
AC_LANG_POP(C++)

AC_MSG_CHECKING(for whether libadplug is usuable)
AC_LANG_PUSH(C++)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <adplug/adplug.h>
#include <adplug/emuopl.h>

class Test
{
public:
	Test() {
		CEmuopl opl(44100, true, true);
		CPlayer* p = CAdPlug::factory(NULL, &opl);
		delete p;
	}
};]],
 [[Test test;]])], [
 AC_MSG_RESULT(yes)
 AC_DEFINE(WITH_ADPLUG, [], [Decode using libadplug])
 LDFLAGS="$LDFLAGS -ladplug"
 AM_CONDITIONAL([ADPLUG], [true])
], [
 AC_MSG_RESULT(no)
 AM_CONDITIONAL([ADPLUG], [false])
])
AC_LANG_POP(C++)

AC_MSG_CHECKING(for whether SDL_mixer is usuable)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <SDL/SDL.h>
#include <SDL/SDL_mixer.h>

void test() {
	/* Check some API functions which we really need */
	Mix_OpenAudio(44100, AUDIO_S16LSB, 2, 1024);
	Mix_LoadMUS_RW(NULL);
	Mix_SetPostMix(NULL, NULL);
}]],
 [[test();]])], [
 AC_MSG_RESULT(yes)
 AC_DEFINE(WITH_SDL_MIXER, [], [Decode MIDI using SDL_mixer])
 LDFLAGS="$LDFLAGS -lSDL_mixer"
 AM_CONDITIONAL([SDL_MIXER], [true])
], [
 AC_MSG_RESULT(no)
 AM_CONDITIONAL([SDL_MIXER], [false])
])

# display an overview of how we will be built
echo
echo "Summary"
echo "------"
echo -n "MP3 support:          "
if test "x${MAD_FALSE}${MPG123_FALSE}" != "x"; then
	echo -n "Yes ("
	if test "x${MPG123_FALSE}" != "x"; then
		echo -n "libmad"
	fi
	if test "x${MPG123_FALSE}" != "x"; then
		if test "x${MPG123_FALSE}" != "x"; then
			echo -n ", "
		fi
		echo -n "libmpg321"
	fi
	echo ")"
else
	echo "No"
fi
echo -n "MP3 tag support:      "
if test "x${ID3TAG_FALSE}{ID3LIB_FALSE}" != "xx"; then
	echo -n "Yes ("
	if test "x${ID3TAG_FALSE}" != "x"; then
		echo -n "libid3tag"
	fi
	if test "x${ID3LIB_FALSE}" != "x"; then
		if test "x${ID3TAG_FALSE}" != "x"; then
			echo -n ", "
		fi
		echo -n "id3lib"
	fi
	echo ")"
else
	echo "No"
fi
echo -n "Ogg Vorbis support:   "
if test "x${VORBIS_FALSE}" != "x"; then
	echo "Yes (libvorbisfile)"
else
	echo "No"
fi
echo -n "Module support:       "
if test "x${MIKMOD_FALSE}" != "x"; then
	echo "Yes (libmikmod)"
else
	echo "No"
fi
echo -n "FLAC support:         "
if test "x${FLAC_FALSE}" != "x"; then
	echo "Yes (libflac++)"
else
	echo "No"
fi
echo -n "SID support:          "
if test "x${SIDPLAY2_FALSE}" != "x"; then
	echo "Yes (libsidplay2)"
else
	echo "No"
fi
echo -n "AdLib support:        "
if test "x${ADPLUG_FALSE}" != "x"; then
	echo "Yes (libadplug)"
else
	echo "No"
fi
echo -n "MIDI support:         "
if test "x${SDL_MIXER_FALSE}" != "x"; then
	echo "Yes (libSDL_mixer)"
else
	echo "No"
fi
echo
echo -n "AO output:            "
if test "x${AO_FALSE}" != "x"; then
	echo "Yes (libao)"
else
	echo "No"
fi
echo -n "ALSA output:          "
if test "x${ALSA_FALSE}" != "x"; then
	echo "Yes (libasound)"
else
	echo "No"
fi
echo -n "X11 visualization:    "
if test "x${SDL_FALSE}" != "x"; then
	echo -n "Yes (libSDL"
	if test "x${SDLGFX_FALSE}" != "x"; then
		echo -n "+libSDL_gfx"
	fi
	echo ")"
else
	echo "No"
fi
echo -n "Streaming input:      "
if test "x${CURL_FALSE}" != "x"; then
	echo "Yes (libcurl)"
else
	echo "No"
fi
echo -n "Spectrum analyzer:    "
if test "x${FFTW_FALSE}" != "x"; then
	echo "Yes (libfftw)"
else
	echo "No"
fi
echo -n "XML support:          "
if test "x${XML_FALSE}" != "x"; then
	echo "Yes (libxml2)"
else
	echo "No"
fi
echo

AC_OUTPUT([Makefile lib/Makefile lib/core/Makefile lib/ui/Makefile src/Makefile
	   lib/misc/Makefile src/musixbox/Makefile src/musixcurses/Makefile
	   src/musixplay/Makefile include/Makefile include/core/Makefile
	   include/misc/Makefile include/ui/Makefile include/musixbox/Makefile
           include/musixcurses/Makefile])
